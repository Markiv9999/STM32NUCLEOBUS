
Nucleo_TMP100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003600  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003788  08003788  00004788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e8  080037e8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080037e8  080037e8  000047e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037f0  080037f0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f0  080037f0  000047f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037f4  080037f4  000047f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003804  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003804  00005108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d315  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be4  00000000  00000000  00012351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00013f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000906  00000000  00000000  00014ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f71  00000000  00000000  000153d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee25  00000000  00000000  0003b347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea213  00000000  00000000  0004a16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013437f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe4  00000000  00000000  001343c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001373a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003770 	.word	0x08003770

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003770 	.word	0x08003770

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 faaf 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f835 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f8f5 	bl	80006c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f8c3 	bl	8000664 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004de:	f000 f881 	bl	80005e4 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
			 //Code to check if Sensor is connected and working
			 ret = HAL_I2C_IsDeviceReady(&hi2c1, INA226_ADDRESS, 10, HAL_MAX_DELAY);
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
 80004e6:	220a      	movs	r2, #10
 80004e8:	2180      	movs	r1, #128	@ 0x80
 80004ea:	4811      	ldr	r0, [pc, #68]	@ (8000530 <main+0x68>)
 80004ec:	f000 fe5f 	bl	80011ae <HAL_I2C_IsDeviceReady>
 80004f0:	4603      	mov	r3, r0
 80004f2:	73fb      	strb	r3, [r7, #15]
			 if ( ret != HAL_OK ) {
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d008      	beq.n	800050c <main+0x44>
					   strcpy((char*)buf, "Error Tx\r\n");
 80004fa:	463b      	mov	r3, r7
 80004fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000534 <main+0x6c>)
 80004fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000500:	c303      	stmia	r3!, {r0, r1}
 8000502:	801a      	strh	r2, [r3, #0]
 8000504:	3302      	adds	r3, #2
 8000506:	0c12      	lsrs	r2, r2, #16
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	e004      	b.n	8000516 <main+0x4e>
					 }
			 else
				 strcpy((char*)buf, "Success\r\n");
 800050c:	463b      	mov	r3, r7
 800050e:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <main+0x70>)
 8000510:	ca07      	ldmia	r2, {r0, r1, r2}
 8000512:	c303      	stmia	r3!, {r0, r1}
 8000514:	801a      	strh	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000516:	463b      	mov	r3, r7
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff fe55 	bl	80001c8 <strlen>
 800051e:	4603      	mov	r3, r0
 8000520:	b29a      	uxth	r2, r3
 8000522:	4639      	mov	r1, r7
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
 8000528:	4804      	ldr	r0, [pc, #16]	@ (800053c <main+0x74>)
 800052a:	f002 fb9d 	bl	8002c68 <HAL_UART_Transmit>
			 ret = HAL_I2C_IsDeviceReady(&hi2c1, INA226_ADDRESS, 10, HAL_MAX_DELAY);
 800052e:	e7d8      	b.n	80004e2 <main+0x1a>
 8000530:	20000028 	.word	0x20000028
 8000534:	08003788 	.word	0x08003788
 8000538:	08003794 	.word	0x08003794
 800053c:	2000007c 	.word	0x2000007c

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	@ 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	@ 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f8e1 	bl	8003716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000562:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000566:	f001 f81f 	bl	80015a8 <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 f90e 	bl	8000790 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058e:	230a      	movs	r3, #10
 8000590:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 f856 	bl	8001654 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ae:	f000 f8ef 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fc1e 	bl	8001e0c <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 f8db 	bl	8000790 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	@ 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000658 <MX_I2C1_Init+0x74>)
 80005ea:	4a1c      	ldr	r2, [pc, #112]	@ (800065c <MX_I2C1_Init+0x78>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_I2C1_Init+0x74>)
 80005f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <MX_I2C1_Init+0x7c>)
 80005f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f4:	4b18      	ldr	r3, [pc, #96]	@ (8000658 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <MX_I2C1_Init+0x74>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <MX_I2C1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000612:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000618:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061e:	480e      	ldr	r0, [pc, #56]	@ (8000658 <MX_I2C1_Init+0x74>)
 8000620:	f000 fd2a 	bl	8001078 <HAL_I2C_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800062a:	f000 f8b1 	bl	8000790 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062e:	2100      	movs	r1, #0
 8000630:	4809      	ldr	r0, [pc, #36]	@ (8000658 <MX_I2C1_Init+0x74>)
 8000632:	f000 ff14 	bl	800145e <HAL_I2CEx_ConfigAnalogFilter>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800063c:	f000 f8a8 	bl	8000790 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000640:	2100      	movs	r1, #0
 8000642:	4805      	ldr	r0, [pc, #20]	@ (8000658 <MX_I2C1_Init+0x74>)
 8000644:	f000 ff56 	bl	80014f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800064e:	f000 f89f 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000028 	.word	0x20000028
 800065c:	40005400 	.word	0x40005400
 8000660:	10909cec 	.word	0x10909cec

08000664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 800066a:	4a15      	ldr	r2, [pc, #84]	@ (80006c0 <MX_USART2_UART_Init+0x5c>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_USART2_UART_Init+0x58>)
 80006a8:	f002 fa90 	bl	8002bcc <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006b2:	f000 f86d 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000007c 	.word	0x2000007c
 80006c0:	40004400 	.word	0x40004400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	@ 0x28
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <MX_GPIO_Init+0xc4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	4a2a      	ldr	r2, [pc, #168]	@ (8000788 <MX_GPIO_Init+0xc4>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e6:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <MX_GPIO_Init+0xc4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a24      	ldr	r2, [pc, #144]	@ (8000788 <MX_GPIO_Init+0xc4>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <MX_GPIO_Init+0xc4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_GPIO_Init+0xc4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a1e      	ldr	r2, [pc, #120]	@ (8000788 <MX_GPIO_Init+0xc4>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <MX_GPIO_Init+0xc4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_GPIO_Init+0xc4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a18      	ldr	r2, [pc, #96]	@ (8000788 <MX_GPIO_Init+0xc4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_GPIO_Init+0xc4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2120      	movs	r1, #32
 800073e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000742:	f000 fc81 	bl	8001048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000746:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480b      	ldr	r0, [pc, #44]	@ (800078c <MX_GPIO_Init+0xc8>)
 800075e:	f000 fac9 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000762:	2320      	movs	r3, #32
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077c:	f000 faba 	bl	8000cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	@ 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40021000 	.word	0x40021000
 800078c:	48000800 	.word	0x48000800

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <Error_Handler+0x8>

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a6:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <HAL_MspInit+0x44>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <HAL_MspInit+0x44>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0ac      	sub	sp, #176	@ 0xb0
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2288      	movs	r2, #136	@ 0x88
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f002 ff86 	bl	8003716 <memset>
  if(hi2c->Instance==I2C1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a21      	ldr	r2, [pc, #132]	@ (8000894 <HAL_I2C_MspInit+0xb0>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d13b      	bne.n	800088c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000814:	2340      	movs	r3, #64	@ 0x40
 8000816:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000818:	2300      	movs	r3, #0
 800081a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fd17 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800082c:	f7ff ffb0 	bl	8000790 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <HAL_I2C_MspInit+0xb4>)
 8000832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000834:	4a18      	ldr	r2, [pc, #96]	@ (8000898 <HAL_I2C_MspInit+0xb4>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <HAL_I2C_MspInit+0xb4>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000848:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800084c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000850:	2312      	movs	r3, #18
 8000852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000862:	2304      	movs	r3, #4
 8000864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800086c:	4619      	mov	r1, r3
 800086e:	480b      	ldr	r0, [pc, #44]	@ (800089c <HAL_I2C_MspInit+0xb8>)
 8000870:	f000 fa40 	bl	8000cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <HAL_I2C_MspInit+0xb4>)
 8000876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000878:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <HAL_I2C_MspInit+0xb4>)
 800087a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800087e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <HAL_I2C_MspInit+0xb4>)
 8000882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800088c:	bf00      	nop
 800088e:	37b0      	adds	r7, #176	@ 0xb0
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40005400 	.word	0x40005400
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0ac      	sub	sp, #176	@ 0xb0
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2288      	movs	r2, #136	@ 0x88
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 ff28 	bl	8003716 <memset>
  if(huart->Instance==USART2)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a21      	ldr	r2, [pc, #132]	@ (8000950 <HAL_UART_MspInit+0xb0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d13b      	bne.n	8000948 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fcb9 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e8:	f7ff ff52 	bl	8000790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ec:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 80008ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f0:	4a18      	ldr	r2, [pc, #96]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 80008f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f8:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000908:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000910:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <HAL_UART_MspInit+0xb4>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 800091c:	230c      	movs	r3, #12
 800091e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000934:	2307      	movs	r3, #7
 8000936:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000944:	f000 f9d6 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000948:	bf00      	nop
 800094a:	37b0      	adds	r7, #176	@ 0xb0
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40004400 	.word	0x40004400
 8000954:	40021000 	.word	0x40021000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ae:	f000 f89b 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e0:	f7ff ffea 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	@ (8000a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a20 <LoopForever+0xe>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a28 <LoopForever+0x16>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f002 fe8d 	bl	8003728 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a0e:	f7ff fd5b 	bl	80004c8 <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a20:	080037f8 	.word	0x080037f8
  ldr r2, =_sbss
 8000a24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a28:	20000108 	.word	0x20000108

08000a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_2_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_Init+0x3c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a6c <HAL_Init+0x3c>)
 8000a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a46:	2003      	movs	r0, #3
 8000a48:	f000 f920 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 f80f 	bl	8000a70 <HAL_InitTick>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	71fb      	strb	r3, [r7, #7]
 8000a5c:	e001      	b.n	8000a62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5e:	f7ff fe9d 	bl	800079c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40022000 	.word	0x40022000

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a7c:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <HAL_InitTick+0x6c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d023      	beq.n	8000acc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <HAL_InitTick+0x70>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_InitTick+0x6c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f91d 	bl	8000cda <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d10f      	bne.n	8000ac6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d809      	bhi.n	8000ac0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f8f5 	bl	8000ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0x74>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e007      	b.n	8000ad0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e004      	b.n	8000ad0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e001      	b.n	8000ad0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000104 	.word	0x20000104

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000104 	.word	0x20000104

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	@ 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff47 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff5c 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffb0 	bl	8000c48 <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e17f      	b.n	8001004 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8171 	beq.w	8000ffe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d005      	beq.n	8000d34 <HAL_GPIO_Init+0x40>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d130      	bne.n	8000d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	f003 0201 	and.w	r2, r3, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d118      	bne.n	8000dd4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000da8:	2201      	movs	r2, #1
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	f003 0201 	and.w	r2, r3, #1
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d017      	beq.n	8000e10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	6939      	ldr	r1, [r7, #16]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80ac 	beq.w	8000ffe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8001024 <HAL_GPIO_Init+0x330>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eaa:	4a5e      	ldr	r2, [pc, #376]	@ (8001024 <HAL_GPIO_Init+0x330>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001024 <HAL_GPIO_Init+0x330>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ebe:	4a5a      	ldr	r2, [pc, #360]	@ (8001028 <HAL_GPIO_Init+0x334>)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ee8:	d025      	beq.n	8000f36 <HAL_GPIO_Init+0x242>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4f      	ldr	r2, [pc, #316]	@ (800102c <HAL_GPIO_Init+0x338>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01f      	beq.n	8000f32 <HAL_GPIO_Init+0x23e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4e      	ldr	r2, [pc, #312]	@ (8001030 <HAL_GPIO_Init+0x33c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x23a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4d      	ldr	r2, [pc, #308]	@ (8001034 <HAL_GPIO_Init+0x340>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x236>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	@ (8001038 <HAL_GPIO_Init+0x344>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x232>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	@ (800103c <HAL_GPIO_Init+0x348>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x22e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4a      	ldr	r2, [pc, #296]	@ (8001040 <HAL_GPIO_Init+0x34c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x22a>
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e00a      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f22:	2305      	movs	r3, #5
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f36:	2300      	movs	r3, #0
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f48:	4937      	ldr	r1, [pc, #220]	@ (8001028 <HAL_GPIO_Init+0x334>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	@ (8001044 <HAL_GPIO_Init+0x350>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f7a:	4a32      	ldr	r2, [pc, #200]	@ (8001044 <HAL_GPIO_Init+0x350>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f80:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <HAL_GPIO_Init+0x350>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fa4:	4a27      	ldr	r2, [pc, #156]	@ (8001044 <HAL_GPIO_Init+0x350>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000faa:	4b26      	ldr	r3, [pc, #152]	@ (8001044 <HAL_GPIO_Init+0x350>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fce:	4a1d      	ldr	r2, [pc, #116]	@ (8001044 <HAL_GPIO_Init+0x350>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <HAL_GPIO_Init+0x350>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ff8:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <HAL_GPIO_Init+0x350>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa22 f303 	lsr.w	r3, r2, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	f47f ae78 	bne.w	8000d04 <HAL_GPIO_Init+0x10>
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	48000400 	.word	0x48000400
 8001030:	48000800 	.word	0x48000800
 8001034:	48000c00 	.word	0x48000c00
 8001038:	48001000 	.word	0x48001000
 800103c:	48001400 	.word	0x48001400
 8001040:	48001800 	.word	0x48001800
 8001044:	40010400 	.word	0x40010400

08001048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001058:	787b      	ldrb	r3, [r7, #1]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001064:	e002      	b.n	800106c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e08d      	b.n	80011a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fba0 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2224      	movs	r2, #36	@ 0x24
 80010a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	e006      	b.n	8001100 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d108      	bne.n	800111a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	e007      	b.n	800112a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001128:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800113c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800114c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69d9      	ldr	r1, [r3, #28]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2220      	movs	r2, #32
 8001192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b08a      	sub	sp, #40	@ 0x28
 80011b2:	af02      	add	r7, sp, #8
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b20      	cmp	r3, #32
 80011cc:	f040 80f3 	bne.w	80013b6 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011de:	d101      	bne.n	80011e4 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80011e0:	2302      	movs	r3, #2
 80011e2:	e0e9      	b.n	80013b8 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_I2C_IsDeviceReady+0x44>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e0e2      	b.n	80013b8 <HAL_I2C_IsDeviceReady+0x20a>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2224      	movs	r2, #36	@ 0x24
 80011fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d107      	bne.n	8001220 <HAL_I2C_IsDeviceReady+0x72>
 8001210:	897b      	ldrh	r3, [r7, #10]
 8001212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001216:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800121a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800121e:	e006      	b.n	800122e <HAL_I2C_IsDeviceReady+0x80>
 8001220:	897b      	ldrh	r3, [r7, #10]
 8001222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001226:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800122a:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001234:	f7ff fc6c 	bl	8000b10 <HAL_GetTick>
 8001238:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0320 	and.w	r3, r3, #32
 8001244:	2b20      	cmp	r3, #32
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b10      	cmp	r3, #16
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001266:	e034      	b.n	80012d2 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126e:	d01a      	beq.n	80012a6 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001270:	f7ff fc4e 	bl	8000b10 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d302      	bcc.n	8001286 <HAL_I2C_IsDeviceReady+0xd8>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10f      	bne.n	80012a6 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2220      	movs	r2, #32
 800128a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f043 0220 	orr.w	r2, r3, #32
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e088      	b.n	80013b8 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0320 	and.w	r3, r3, #32
 80012b0:	2b20      	cmp	r3, #32
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b10      	cmp	r3, #16
 80012c8:	bf0c      	ite	eq
 80012ca:	2301      	moveq	r3, #1
 80012cc:	2300      	movne	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80012d2:	7ffb      	ldrb	r3, [r7, #31]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <HAL_I2C_IsDeviceReady+0x130>
 80012d8:	7fbb      	ldrb	r3, [r7, #30]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0c4      	beq.n	8001268 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b10      	cmp	r3, #16
 80012ea:	d01a      	beq.n	8001322 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	2120      	movs	r1, #32
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f862 	bl	80013c0 <I2C_WaitOnFlagUntilTimeout>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e058      	b.n	80013b8 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2220      	movs	r2, #32
 800130c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2220      	movs	r2, #32
 8001312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e04a      	b.n	80013b8 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2200      	movs	r2, #0
 800132a:	2120      	movs	r1, #32
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f000 f847 	bl	80013c0 <I2C_WaitOnFlagUntilTimeout>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e03d      	b.n	80013b8 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2210      	movs	r2, #16
 8001342:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2220      	movs	r2, #32
 800134a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	d118      	bne.n	8001386 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001362:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	2120      	movs	r1, #32
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 f826 	bl	80013c0 <I2C_WaitOnFlagUntilTimeout>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e01c      	b.n	80013b8 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2220      	movs	r2, #32
 8001384:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	f63f af39 	bhi.w	8001208 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2220      	movs	r2, #32
 800139a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	f043 0220 	orr.w	r2, r3, #32
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80013b6:	2302      	movs	r3, #2
  }
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013d0:	e031      	b.n	8001436 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d02d      	beq.n	8001436 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013da:	f7ff fb99 	bl	8000b10 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d302      	bcc.n	80013f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d122      	bne.n	8001436 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699a      	ldr	r2, [r3, #24]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	4013      	ands	r3, r2
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	bf0c      	ite	eq
 8001400:	2301      	moveq	r3, #1
 8001402:	2300      	movne	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	429a      	cmp	r2, r3
 800140c:	d113      	bne.n	8001436 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	f043 0220 	orr.w	r2, r3, #32
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	699a      	ldr	r2, [r3, #24]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4013      	ands	r3, r2
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	429a      	cmp	r2, r3
 8001444:	bf0c      	ite	eq
 8001446:	2301      	moveq	r3, #1
 8001448:	2300      	movne	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	429a      	cmp	r2, r3
 8001452:	d0be      	beq.n	80013d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b20      	cmp	r3, #32
 8001472:	d138      	bne.n	80014e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800147e:	2302      	movs	r3, #2
 8001480:	e032      	b.n	80014e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2224      	movs	r2, #36	@ 0x24
 800148e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0201 	bic.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6819      	ldr	r1, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2220      	movs	r2, #32
 80014d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014e6:	2302      	movs	r3, #2
  }
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	d139      	bne.n	800157e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001514:	2302      	movs	r3, #2
 8001516:	e033      	b.n	8001580 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	@ 0x24
 8001524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001546:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0201 	orr.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2220      	movs	r2, #32
 800156e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800157e:	2302      	movs	r3, #2
  }
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000

080015a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015b6:	d130      	bne.n	800161a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b8:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c4:	d038      	beq.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2232      	movs	r2, #50	@ 0x32
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9b      	lsrs	r3, r3, #18
 80015e8:	3301      	adds	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ec:	e002      	b.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001600:	d102      	bne.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f2      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001614:	d110      	bne.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e00f      	b.n	800163a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001626:	d007      	beq.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001630:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001636:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40007000 	.word	0x40007000
 800164c:	20000000 	.word	0x20000000
 8001650:	431bde83 	.word	0x431bde83

08001654 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e3ca      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001666:	4b97      	ldr	r3, [pc, #604]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001670:	4b94      	ldr	r3, [pc, #592]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80e4 	beq.w	8001850 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_RCC_OscConfig+0x4a>
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	f040 808b 	bne.w	80017ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b01      	cmp	r3, #1
 800169a:	f040 8087 	bne.w	80017ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800169e:	4b89      	ldr	r3, [pc, #548]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x62>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e3a2      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1a      	ldr	r2, [r3, #32]
 80016ba:	4b82      	ldr	r3, [pc, #520]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <HAL_RCC_OscConfig+0x7c>
 80016c6:	4b7f      	ldr	r3, [pc, #508]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016ce:	e005      	b.n	80016dc <HAL_RCC_OscConfig+0x88>
 80016d0:	4b7c      	ldr	r3, [pc, #496]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016dc:	4293      	cmp	r3, r2
 80016de:	d223      	bcs.n	8001728 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fd55 	bl	8002194 <RCC_SetFlashLatencyFromMSIRange>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e383      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f4:	4b73      	ldr	r3, [pc, #460]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a72      	ldr	r2, [pc, #456]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b70      	ldr	r3, [pc, #448]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	496d      	ldr	r1, [pc, #436]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001712:	4b6c      	ldr	r3, [pc, #432]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	4968      	ldr	r1, [pc, #416]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
 8001726:	e025      	b.n	8001774 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001728:	4b66      	ldr	r3, [pc, #408]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a65      	ldr	r2, [pc, #404]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b63      	ldr	r3, [pc, #396]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4960      	ldr	r1, [pc, #384]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001746:	4b5f      	ldr	r3, [pc, #380]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	495b      	ldr	r1, [pc, #364]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fd15 	bl	8002194 <RCC_SetFlashLatencyFromMSIRange>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e343      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001774:	f000 fc4a 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001778:	4602      	mov	r2, r0
 800177a:	4b52      	ldr	r3, [pc, #328]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	4950      	ldr	r1, [pc, #320]	@ (80018c8 <HAL_RCC_OscConfig+0x274>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	4a4e      	ldr	r2, [pc, #312]	@ (80018cc <HAL_RCC_OscConfig+0x278>)
 8001792:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001794:	4b4e      	ldr	r3, [pc, #312]	@ (80018d0 <HAL_RCC_OscConfig+0x27c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff f969 	bl	8000a70 <HAL_InitTick>
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d052      	beq.n	800184e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	e327      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d032      	beq.n	800181a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017b4:	4b43      	ldr	r3, [pc, #268]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a42      	ldr	r2, [pc, #264]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017c0:	f7ff f9a6 	bl	8000b10 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c8:	f7ff f9a2 	bl	8000b10 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e310      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017da:	4b3a      	ldr	r3, [pc, #232]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e6:	4b37      	ldr	r3, [pc, #220]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a36      	ldr	r2, [pc, #216]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017ec:	f043 0308 	orr.w	r3, r3, #8
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b34      	ldr	r3, [pc, #208]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4931      	ldr	r1, [pc, #196]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001804:	4b2f      	ldr	r3, [pc, #188]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	492c      	ldr	r1, [pc, #176]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	e01a      	b.n	8001850 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800181a:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a29      	ldr	r2, [pc, #164]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001826:	f7ff f973 	bl	8000b10 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800182e:	f7ff f96f 	bl	8000b10 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e2dd      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001840:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x1da>
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800184e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d074      	beq.n	8001946 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b08      	cmp	r3, #8
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x21a>
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d10e      	bne.n	8001886 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b03      	cmp	r3, #3
 800186c:	d10b      	bne.n	8001886 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d064      	beq.n	8001944 <HAL_RCC_OscConfig+0x2f0>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d160      	bne.n	8001944 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e2ba      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x24a>
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0b      	ldr	r2, [pc, #44]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e026      	b.n	80018ec <HAL_RCC_OscConfig+0x298>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a6:	d115      	bne.n	80018d4 <HAL_RCC_OscConfig+0x280>
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a02      	ldr	r2, [pc, #8]	@ (80018c4 <HAL_RCC_OscConfig+0x270>)
 80018ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	e014      	b.n	80018ec <HAL_RCC_OscConfig+0x298>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	080037a0 	.word	0x080037a0
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004
 80018d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a9f      	ldr	r2, [pc, #636]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff f90c 	bl	8000b10 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff f908 	bl	8000b10 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	@ 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e276      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800190e:	4b92      	ldr	r3, [pc, #584]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x2a8>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff f8f8 	bl	8000b10 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff f8f4 	bl	8000b10 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	@ 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e262      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001936:	4b88      	ldr	r3, [pc, #544]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x2d0>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d060      	beq.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d005      	beq.n	8001964 <HAL_RCC_OscConfig+0x310>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d119      	bne.n	8001992 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d116      	bne.n	8001992 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001964:	4b7c      	ldr	r3, [pc, #496]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_OscConfig+0x328>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e23f      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b76      	ldr	r3, [pc, #472]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	4973      	ldr	r1, [pc, #460]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001990:	e040      	b.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d023      	beq.n	80019e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff f8b3 	bl	8000b10 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff f8af 	bl	8000b10 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e21d      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c0:	4b65      	ldr	r3, [pc, #404]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b62      	ldr	r3, [pc, #392]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	495f      	ldr	r1, [pc, #380]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e018      	b.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 80019e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff f88f 	bl	8000b10 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff f88b 	bl	8000b10 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1f9      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a08:	4b53      	ldr	r3, [pc, #332]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d03c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a28:	4b4b      	ldr	r3, [pc, #300]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff f86a 	bl	8000b10 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff f866 	bl	8000b10 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1d4      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a52:	4b41      	ldr	r3, [pc, #260]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ef      	beq.n	8001a40 <HAL_RCC_OscConfig+0x3ec>
 8001a60:	e01b      	b.n	8001a9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a62:	4b3d      	ldr	r3, [pc, #244]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a68:	4a3b      	ldr	r2, [pc, #236]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff f84d 	bl	8000b10 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f849 	bl	8000b10 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1b7      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a8c:	4b32      	ldr	r3, [pc, #200]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ef      	bne.n	8001a7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80a6 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001aac:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10d      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abc:	4a26      	ldr	r2, [pc, #152]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac4:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d118      	bne.n	8001b12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aec:	f7ff f810 	bl	8000b10 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af4:	f7ff f80c 	bl	8000b10 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e17a      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_RCC_OscConfig+0x508>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d108      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4d8>
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b2a:	e029      	b.n	8001b80 <HAL_RCC_OscConfig+0x52c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d115      	bne.n	8001b60 <HAL_RCC_OscConfig+0x50c>
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b3a:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4a:	4a03      	ldr	r2, [pc, #12]	@ (8001b58 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b54:	e014      	b.n	8001b80 <HAL_RCC_OscConfig+0x52c>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	4b9c      	ldr	r3, [pc, #624]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b66:	4a9b      	ldr	r2, [pc, #620]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b70:	4b98      	ldr	r3, [pc, #608]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b76:	4a97      	ldr	r2, [pc, #604]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d016      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7fe ffc2 	bl	8000b10 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7fe ffbe 	bl	8000b10 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e12a      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba6:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0ed      	beq.n	8001b90 <HAL_RCC_OscConfig+0x53c>
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7fe ffab 	bl	8000b10 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7fe ffa7 	bl	8000b10 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e113      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd4:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ed      	bne.n	8001bbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b7a      	ldr	r3, [pc, #488]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	4a79      	ldr	r2, [pc, #484]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80fe 	beq.w	8001dfa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	f040 80d0 	bne.w	8001da8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c08:	4b72      	ldr	r3, [pc, #456]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d130      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	3b01      	subs	r3, #1
 8001c28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d127      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d11f      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c48:	2a07      	cmp	r2, #7
 8001c4a:	bf14      	ite	ne
 8001c4c:	2201      	movne	r2, #1
 8001c4e:	2200      	moveq	r2, #0
 8001c50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d113      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	3b01      	subs	r3, #1
 8001c64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	3b01      	subs	r3, #1
 8001c78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d06e      	beq.n	8001d5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d069      	beq.n	8001d58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c84:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c90:	4b50      	ldr	r3, [pc, #320]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0ad      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001caa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cac:	f7fe ff30 	bl	8000b10 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7fe ff2c 	bl	8000b10 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e09a      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc6:	4b43      	ldr	r3, [pc, #268]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd2:	4b40      	ldr	r3, [pc, #256]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	4b40      	ldr	r3, [pc, #256]	@ (8001dd8 <HAL_RCC_OscConfig+0x784>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ce2:	3a01      	subs	r2, #1
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cec:	0212      	lsls	r2, r2, #8
 8001cee:	4311      	orrs	r1, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cf4:	0852      	lsrs	r2, r2, #1
 8001cf6:	3a01      	subs	r2, #1
 8001cf8:	0552      	lsls	r2, r2, #21
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d00:	0852      	lsrs	r2, r2, #1
 8001d02:	3a01      	subs	r2, #1
 8001d04:	0652      	lsls	r2, r2, #25
 8001d06:	4311      	orrs	r1, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d0c:	0912      	lsrs	r2, r2, #4
 8001d0e:	0452      	lsls	r2, r2, #17
 8001d10:	430a      	orrs	r2, r1
 8001d12:	4930      	ldr	r1, [pc, #192]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d18:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d24:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d30:	f7fe feee 	bl	8000b10 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7fe feea 	bl	8000b10 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e058      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4a:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d56:	e050      	b.n	8001dfa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e04f      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d148      	bne.n	8001dfa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d74:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4a16      	ldr	r2, [pc, #88]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d80:	f7fe fec6 	bl	8000b10 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe fec2 	bl	8000b10 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e030      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x734>
 8001da6:	e028      	b.n	8001dfa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d023      	beq.n	8001df6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a08      	ldr	r2, [pc, #32]	@ (8001dd4 <HAL_RCC_OscConfig+0x780>)
 8001db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7fe fea9 	bl	8000b10 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc0:	e00c      	b.n	8001ddc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7fe fea5 	bl	8000b10 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d905      	bls.n	8001ddc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e013      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_RCC_OscConfig+0x7b0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ec      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_RCC_OscConfig+0x7b0>)
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	4905      	ldr	r1, [pc, #20]	@ (8001e04 <HAL_RCC_OscConfig+0x7b0>)
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_RCC_OscConfig+0x7b4>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
 8001df4:	e001      	b.n	8001dfa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	feeefffc 	.word	0xfeeefffc

08001e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0e7      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b75      	ldr	r3, [pc, #468]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d910      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4970      	ldr	r1, [pc, #448]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0cf      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d010      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	4b66      	ldr	r3, [pc, #408]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d908      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b63      	ldr	r3, [pc, #396]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4960      	ldr	r1, [pc, #384]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d04c      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	4b5a      	ldr	r3, [pc, #360]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d121      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0a6      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eaa:	4b54      	ldr	r3, [pc, #336]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d115      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e09a      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e08e      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e086      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b46      	ldr	r3, [pc, #280]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4943      	ldr	r1, [pc, #268]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef4:	f7fe fe0c 	bl	8000b10 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7fe fe08 	bl	8000b10 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e06e      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b3a      	ldr	r3, [pc, #232]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d010      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	4b31      	ldr	r3, [pc, #196]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d208      	bcs.n	8001f52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b2e      	ldr	r3, [pc, #184]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	492b      	ldr	r1, [pc, #172]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f52:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d210      	bcs.n	8001f82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 0207 	bic.w	r2, r3, #7
 8001f68:	4923      	ldr	r1, [pc, #140]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f70:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e036      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	4918      	ldr	r1, [pc, #96]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d009      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4910      	ldr	r1, [pc, #64]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fc0:	f000 f824 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	490b      	ldr	r1, [pc, #44]	@ (8002000 <HAL_RCC_ClockConfig+0x1f4>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fdc:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <HAL_RCC_ClockConfig+0x1f8>)
 8001fde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_RCC_ClockConfig+0x1fc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fd43 	bl	8000a70 <HAL_InitTick>
 8001fea:	4603      	mov	r3, r0
 8001fec:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fee:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	080037a0 	.word	0x080037a0
 8002004:	20000000 	.word	0x20000000
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4b3e      	ldr	r3, [pc, #248]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002024:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x34>
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d121      	bne.n	800207e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d11e      	bne.n	800207e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002040:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800204c:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 800204e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e005      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800205c:	4b2d      	ldr	r3, [pc, #180]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002068:	4a2b      	ldr	r2, [pc, #172]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x10c>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10d      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b04      	cmp	r3, #4
 8002082:	d102      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002084:	4b25      	ldr	r3, [pc, #148]	@ (800211c <HAL_RCC_GetSysClockFreq+0x110>)
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	e004      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d101      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002090:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x114>)
 8002092:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d134      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800209a:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d003      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d003      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0xac>
 80020b0:	e005      	b.n	80020be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <HAL_RCC_GetSysClockFreq+0x110>)
 80020b4:	617b      	str	r3, [r7, #20]
      break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x114>)
 80020ba:	617b      	str	r3, [r7, #20]
      break;
 80020bc:	e002      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	617b      	str	r3, [r7, #20]
      break;
 80020c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c4:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	3301      	adds	r3, #1
 80020d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	fb03 f202 	mul.w	r2, r3, r2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	0e5b      	lsrs	r3, r3, #25
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	3301      	adds	r3, #1
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002104:	69bb      	ldr	r3, [r7, #24]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	080037b8 	.word	0x080037b8
 800211c:	00f42400 	.word	0x00f42400
 8002120:	007a1200 	.word	0x007a1200

08002124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002140:	f7ff fff0 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4904      	ldr	r1, [pc, #16]	@ (8002164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	080037b0 	.word	0x080037b0

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800216c:	f7ff ffda 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4904      	ldr	r1, [pc, #16]	@ (8002190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	080037b0 	.word	0x080037b0

08002194 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021a0:	4b2a      	ldr	r3, [pc, #168]	@ (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021ac:	f7ff f9ee 	bl	800158c <HAL_PWREx_GetVoltageRange>
 80021b0:	6178      	str	r0, [r7, #20]
 80021b2:	e014      	b.n	80021de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b4:	4b25      	ldr	r3, [pc, #148]	@ (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b8:	4a24      	ldr	r2, [pc, #144]	@ (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021be:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c0:	4b22      	ldr	r3, [pc, #136]	@ (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021cc:	f7ff f9de 	bl	800158c <HAL_PWREx_GetVoltageRange>
 80021d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	4a1d      	ldr	r2, [pc, #116]	@ (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021e4:	d10b      	bne.n	80021fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b80      	cmp	r3, #128	@ 0x80
 80021ea:	d919      	bls.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80021f0:	d902      	bls.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021f2:	2302      	movs	r3, #2
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e013      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f8:	2301      	movs	r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	e010      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b80      	cmp	r3, #128	@ 0x80
 8002202:	d902      	bls.n	800220a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002204:	2303      	movs	r3, #3
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	e00a      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b80      	cmp	r3, #128	@ 0x80
 800220e:	d102      	bne.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002210:	2302      	movs	r3, #2
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e004      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b70      	cmp	r3, #112	@ 0x70
 800221a:	d101      	bne.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800221c:	2301      	movs	r3, #1
 800221e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002220:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 0207 	bic.w	r2, r3, #7
 8002228:	4909      	ldr	r1, [pc, #36]	@ (8002250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002230:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	40022000 	.word	0x40022000

08002254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800225c:	2300      	movs	r3, #0
 800225e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002260:	2300      	movs	r3, #0
 8002262:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800226c:	2b00      	cmp	r3, #0
 800226e:	d041      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002274:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002278:	d02a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800227a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800227e:	d824      	bhi.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002280:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002284:	d008      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002286:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800228a:	d81e      	bhi.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002294:	d010      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002296:	e018      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002298:	4b86      	ldr	r3, [pc, #536]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a85      	ldr	r2, [pc, #532]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a4:	e015      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fabb 	bl	8002828 <RCCEx_PLLSAI1_Config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b6:	e00c      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3320      	adds	r3, #32
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fba6 	bl	8002a10 <RCCEx_PLLSAI2_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c8:	e003      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	74fb      	strb	r3, [r7, #19]
      break;
 80022ce:	e000      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022d2:	7cfb      	ldrb	r3, [r7, #19]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d8:	4b76      	ldr	r3, [pc, #472]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022e6:	4973      	ldr	r1, [pc, #460]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022ee:	e001      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d041      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002304:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002308:	d02a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800230a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800230e:	d824      	bhi.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002310:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002314:	d008      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800231a:	d81e      	bhi.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002324:	d010      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002326:	e018      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002328:	4b62      	ldr	r3, [pc, #392]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a61      	ldr	r2, [pc, #388]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002332:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002334:	e015      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fa73 	bl	8002828 <RCCEx_PLLSAI1_Config>
 8002342:	4603      	mov	r3, r0
 8002344:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002346:	e00c      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3320      	adds	r3, #32
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fb5e 	bl	8002a10 <RCCEx_PLLSAI2_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002358:	e003      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	74fb      	strb	r3, [r7, #19]
      break;
 800235e:	e000      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002368:	4b52      	ldr	r3, [pc, #328]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002376:	494f      	ldr	r1, [pc, #316]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800237e:	e001      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80a0 	beq.w	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023a6:	2300      	movs	r3, #0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00d      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ac:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	4a40      	ldr	r2, [pc, #256]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023b8:	4b3e      	ldr	r3, [pc, #248]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c8:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a3a      	ldr	r2, [pc, #232]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023d4:	f7fe fb9c 	bl	8000b10 <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023da:	e009      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023dc:	f7fe fb98 	bl	8000b10 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d902      	bls.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	74fb      	strb	r3, [r7, #19]
        break;
 80023ee:	e005      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023f0:	4b31      	ldr	r3, [pc, #196]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ef      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d15c      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002402:	4b2c      	ldr	r3, [pc, #176]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800240c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01f      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	d019      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002420:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800242a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800242c:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002432:	4a20      	ldr	r2, [pc, #128]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800243c:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002442:	4a1c      	ldr	r2, [pc, #112]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800244c:	4a19      	ldr	r2, [pc, #100]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fb57 	bl	8000b10 <HAL_GetTick>
 8002462:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002464:	e00b      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe fb53 	bl	8000b10 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d902      	bls.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	74fb      	strb	r3, [r7, #19]
            break;
 800247c:	e006      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247e:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ec      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002492:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002498:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a2:	4904      	ldr	r1, [pc, #16]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024aa:	e009      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	74bb      	strb	r3, [r7, #18]
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c0:	7c7b      	ldrb	r3, [r7, #17]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d105      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c6:	4b9e      	ldr	r3, [pc, #632]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	4a9d      	ldr	r2, [pc, #628]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024de:	4b98      	ldr	r3, [pc, #608]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e4:	f023 0203 	bic.w	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ec:	4994      	ldr	r1, [pc, #592]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002500:	4b8f      	ldr	r3, [pc, #572]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002506:	f023 020c 	bic.w	r2, r3, #12
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250e:	498c      	ldr	r1, [pc, #560]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002522:	4b87      	ldr	r3, [pc, #540]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002528:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	4983      	ldr	r1, [pc, #524]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002544:	4b7e      	ldr	r3, [pc, #504]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	497b      	ldr	r1, [pc, #492]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002566:	4b76      	ldr	r3, [pc, #472]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002574:	4972      	ldr	r1, [pc, #456]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002588:	4b6d      	ldr	r3, [pc, #436]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	496a      	ldr	r1, [pc, #424]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025aa:	4b65      	ldr	r3, [pc, #404]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	4961      	ldr	r1, [pc, #388]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025da:	4959      	ldr	r1, [pc, #356]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ee:	4b54      	ldr	r3, [pc, #336]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fc:	4950      	ldr	r1, [pc, #320]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002610:	4b4b      	ldr	r3, [pc, #300]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	4948      	ldr	r1, [pc, #288]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002632:	4b43      	ldr	r3, [pc, #268]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002638:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	493f      	ldr	r1, [pc, #252]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d028      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002654:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002662:	4937      	ldr	r1, [pc, #220]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800266e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002672:	d106      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002674:	4b32      	ldr	r3, [pc, #200]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a31      	ldr	r2, [pc, #196]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800267e:	60d3      	str	r3, [r2, #12]
 8002680:	e011      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002686:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800268a:	d10c      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3304      	adds	r3, #4
 8002690:	2101      	movs	r1, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f8c8 	bl	8002828 <RCCEx_PLLSAI1_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d028      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026b2:	4b23      	ldr	r3, [pc, #140]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c0:	491f      	ldr	r1, [pc, #124]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026d0:	d106      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026dc:	60d3      	str	r3, [r2, #12]
 80026de:	e011      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026e8:	d10c      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2101      	movs	r1, #1
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 f899 	bl	8002828 <RCCEx_PLLSAI1_Config>
 80026f6:	4603      	mov	r3, r0
 80026f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d02b      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002710:	4b0b      	ldr	r3, [pc, #44]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271e:	4908      	ldr	r1, [pc, #32]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800272e:	d109      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002730:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a02      	ldr	r2, [pc, #8]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800273a:	60d3      	str	r3, [r2, #12]
 800273c:	e014      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800274c:	d10c      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f867 	bl	8002828 <RCCEx_PLLSAI1_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d02f      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002774:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002782:	4928      	ldr	r1, [pc, #160]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800278e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002792:	d10d      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	2102      	movs	r1, #2
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f844 	bl	8002828 <RCCEx_PLLSAI1_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d014      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	74bb      	strb	r3, [r7, #18]
 80027ae:	e011      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3320      	adds	r3, #32
 80027be:	2102      	movs	r1, #2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 f925 	bl	8002a10 <RCCEx_PLLSAI2_Config>
 80027c6:	4603      	mov	r3, r0
 80027c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027d0:	7cfb      	ldrb	r3, [r7, #19]
 80027d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027e0:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ee:	490d      	ldr	r1, [pc, #52]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002808:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002812:	4904      	ldr	r1, [pc, #16]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800281a:	7cbb      	ldrb	r3, [r7, #18]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000

08002828 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002836:	4b75      	ldr	r3, [pc, #468]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d018      	beq.n	8002874 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002842:	4b72      	ldr	r3, [pc, #456]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0203 	and.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d10d      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
       ||
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800285a:	4b6c      	ldr	r3, [pc, #432]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
       ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d047      	beq.n	80028fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
 8002872:	e044      	b.n	80028fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d018      	beq.n	80028ae <RCCEx_PLLSAI1_Config+0x86>
 800287c:	2b03      	cmp	r3, #3
 800287e:	d825      	bhi.n	80028cc <RCCEx_PLLSAI1_Config+0xa4>
 8002880:	2b01      	cmp	r3, #1
 8002882:	d002      	beq.n	800288a <RCCEx_PLLSAI1_Config+0x62>
 8002884:	2b02      	cmp	r3, #2
 8002886:	d009      	beq.n	800289c <RCCEx_PLLSAI1_Config+0x74>
 8002888:	e020      	b.n	80028cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800288a:	4b60      	ldr	r3, [pc, #384]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d11d      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289a:	e01a      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800289c:	4b5b      	ldr	r3, [pc, #364]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d116      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e013      	b.n	80028d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ae:	4b57      	ldr	r3, [pc, #348]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10f      	bne.n	80028da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ba:	4b54      	ldr	r3, [pc, #336]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ca:	e006      	b.n	80028da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e004      	b.n	80028dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028d2:	bf00      	nop
 80028d4:	e002      	b.n	80028dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028da:	bf00      	nop
    }

    if(status == HAL_OK)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10d      	bne.n	80028fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028e2:	4b4a      	ldr	r3, [pc, #296]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	430b      	orrs	r3, r1
 80028f8:	4944      	ldr	r1, [pc, #272]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d17d      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002904:	4b41      	ldr	r3, [pc, #260]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a40      	ldr	r2, [pc, #256]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800290e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002910:	f7fe f8fe 	bl	8000b10 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002916:	e009      	b.n	800292c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002918:	f7fe f8fa 	bl	8000b10 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d902      	bls.n	800292c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	73fb      	strb	r3, [r7, #15]
        break;
 800292a:	e005      	b.n	8002938 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800292c:	4b37      	ldr	r3, [pc, #220]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ef      	bne.n	8002918 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d160      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d111      	bne.n	8002968 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002944:	4b31      	ldr	r3, [pc, #196]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800294c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6892      	ldr	r2, [r2, #8]
 8002954:	0211      	lsls	r1, r2, #8
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68d2      	ldr	r2, [r2, #12]
 800295a:	0912      	lsrs	r2, r2, #4
 800295c:	0452      	lsls	r2, r2, #17
 800295e:	430a      	orrs	r2, r1
 8002960:	492a      	ldr	r1, [pc, #168]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	610b      	str	r3, [r1, #16]
 8002966:	e027      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d112      	bne.n	8002994 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800296e:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002976:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6892      	ldr	r2, [r2, #8]
 800297e:	0211      	lsls	r1, r2, #8
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6912      	ldr	r2, [r2, #16]
 8002984:	0852      	lsrs	r2, r2, #1
 8002986:	3a01      	subs	r2, #1
 8002988:	0552      	lsls	r2, r2, #21
 800298a:	430a      	orrs	r2, r1
 800298c:	491f      	ldr	r1, [pc, #124]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	610b      	str	r3, [r1, #16]
 8002992:	e011      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002994:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800299c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6892      	ldr	r2, [r2, #8]
 80029a4:	0211      	lsls	r1, r2, #8
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6952      	ldr	r2, [r2, #20]
 80029aa:	0852      	lsrs	r2, r2, #1
 80029ac:	3a01      	subs	r2, #1
 80029ae:	0652      	lsls	r2, r2, #25
 80029b0:	430a      	orrs	r2, r1
 80029b2:	4916      	ldr	r1, [pc, #88]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029b8:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a13      	ldr	r2, [pc, #76]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c4:	f7fe f8a4 	bl	8000b10 <HAL_GetTick>
 80029c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ca:	e009      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029cc:	f7fe f8a0 	bl	8000b10 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d902      	bls.n	80029e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	73fb      	strb	r3, [r7, #15]
          break;
 80029de:	e005      	b.n	80029ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029e0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ef      	beq.n	80029cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	4904      	ldr	r1, [pc, #16]	@ (8002a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000

08002a10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d018      	beq.n	8002a5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a2a:	4b67      	ldr	r3, [pc, #412]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0203 	and.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d10d      	bne.n	8002a56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a42:	4b61      	ldr	r3, [pc, #388]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
       ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d047      	beq.n	8002ae6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e044      	b.n	8002ae6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d018      	beq.n	8002a96 <RCCEx_PLLSAI2_Config+0x86>
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d825      	bhi.n	8002ab4 <RCCEx_PLLSAI2_Config+0xa4>
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d002      	beq.n	8002a72 <RCCEx_PLLSAI2_Config+0x62>
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d009      	beq.n	8002a84 <RCCEx_PLLSAI2_Config+0x74>
 8002a70:	e020      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a72:	4b55      	ldr	r3, [pc, #340]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11d      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a82:	e01a      	b.n	8002aba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a84:	4b50      	ldr	r3, [pc, #320]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d116      	bne.n	8002abe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a94:	e013      	b.n	8002abe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a96:	4b4c      	ldr	r3, [pc, #304]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aa2:	4b49      	ldr	r3, [pc, #292]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ab2:	e006      	b.n	8002ac2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab8:	e004      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aba:	bf00      	nop
 8002abc:	e002      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10d      	bne.n	8002ae6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aca:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	4939      	ldr	r1, [pc, #228]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d167      	bne.n	8002bbc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002aec:	4b36      	ldr	r3, [pc, #216]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a35      	ldr	r2, [pc, #212]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af8:	f7fe f80a 	bl	8000b10 <HAL_GetTick>
 8002afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002afe:	e009      	b.n	8002b14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b00:	f7fe f806 	bl	8000b10 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d902      	bls.n	8002b14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	73fb      	strb	r3, [r7, #15]
        break;
 8002b12:	e005      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b14:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ef      	bne.n	8002b00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d14a      	bne.n	8002bbc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d111      	bne.n	8002b50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b2c:	4b26      	ldr	r3, [pc, #152]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6892      	ldr	r2, [r2, #8]
 8002b3c:	0211      	lsls	r1, r2, #8
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68d2      	ldr	r2, [r2, #12]
 8002b42:	0912      	lsrs	r2, r2, #4
 8002b44:	0452      	lsls	r2, r2, #17
 8002b46:	430a      	orrs	r2, r1
 8002b48:	491f      	ldr	r1, [pc, #124]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	614b      	str	r3, [r1, #20]
 8002b4e:	e011      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b50:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6892      	ldr	r2, [r2, #8]
 8002b60:	0211      	lsls	r1, r2, #8
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6912      	ldr	r2, [r2, #16]
 8002b66:	0852      	lsrs	r2, r2, #1
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0652      	lsls	r2, r2, #25
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	4916      	ldr	r1, [pc, #88]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b74:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a13      	ldr	r2, [pc, #76]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7fd ffc6 	bl	8000b10 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b86:	e009      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b88:	f7fd ffc2 	bl	8000b10 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	73fb      	strb	r3, [r7, #15]
          break;
 8002b9a:	e005      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ef      	beq.n	8002b88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4904      	ldr	r1, [pc, #16]	@ (8002bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000

08002bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e040      	b.n	8002c60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd fe56 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	@ 0x24
 8002bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fb6a 	bl	80032ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f8af 	bl	8002d7c <UART_SetConfig>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e01b      	b.n	8002c60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fbe9 	bl	8003430 <UART_CheckIdleState>
 8002c5e:	4603      	mov	r3, r0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	@ 0x28
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d177      	bne.n	8002d70 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_UART_Transmit+0x24>
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e070      	b.n	8002d72 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2221      	movs	r2, #33	@ 0x21
 8002c9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c9e:	f7fd ff37 	bl	8000b10 <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	88fa      	ldrh	r2, [r7, #6]
 8002ca8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	88fa      	ldrh	r2, [r7, #6]
 8002cb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cbc:	d108      	bne.n	8002cd0 <HAL_UART_Transmit+0x68>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	e003      	b.n	8002cd8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cd8:	e02f      	b.n	8002d3a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2180      	movs	r1, #128	@ 0x80
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fc4b 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e03b      	b.n	8002d72 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d0c:	b292      	uxth	r2, r2
 8002d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	3302      	adds	r3, #2
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e007      	b.n	8002d28 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3301      	adds	r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1c9      	bne.n	8002cda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2140      	movs	r1, #64	@ 0x40
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fc15 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e005      	b.n	8002d72 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e000      	b.n	8002d72 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
  }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d80:	b08a      	sub	sp, #40	@ 0x28
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4ba4      	ldr	r3, [pc, #656]	@ (800303c <UART_SetConfig+0x2c0>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a99      	ldr	r2, [pc, #612]	@ (8003040 <UART_SetConfig+0x2c4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de4:	4313      	orrs	r3, r2
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a90      	ldr	r2, [pc, #576]	@ (8003044 <UART_SetConfig+0x2c8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d126      	bne.n	8002e54 <UART_SetConfig+0xd8>
 8002e06:	4b90      	ldr	r3, [pc, #576]	@ (8003048 <UART_SetConfig+0x2cc>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d81b      	bhi.n	8002e4c <UART_SetConfig+0xd0>
 8002e14:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <UART_SetConfig+0xa0>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e3d 	.word	0x08002e3d
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e45 	.word	0x08002e45
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e32:	e116      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002e34:	2302      	movs	r3, #2
 8002e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3a:	e112      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e42:	e10e      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002e44:	2308      	movs	r3, #8
 8002e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e4a:	e10a      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e52:	e106      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a7c      	ldr	r2, [pc, #496]	@ (800304c <UART_SetConfig+0x2d0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d138      	bne.n	8002ed0 <UART_SetConfig+0x154>
 8002e5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003048 <UART_SetConfig+0x2cc>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d82d      	bhi.n	8002ec8 <UART_SetConfig+0x14c>
 8002e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e74 <UART_SetConfig+0xf8>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08002ec9 	.word	0x08002ec9
 8002e7c:	08002ec9 	.word	0x08002ec9
 8002e80:	08002ec9 	.word	0x08002ec9
 8002e84:	08002eb9 	.word	0x08002eb9
 8002e88:	08002ec9 	.word	0x08002ec9
 8002e8c:	08002ec9 	.word	0x08002ec9
 8002e90:	08002ec9 	.word	0x08002ec9
 8002e94:	08002eb1 	.word	0x08002eb1
 8002e98:	08002ec9 	.word	0x08002ec9
 8002e9c:	08002ec9 	.word	0x08002ec9
 8002ea0:	08002ec9 	.word	0x08002ec9
 8002ea4:	08002ec1 	.word	0x08002ec1
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eae:	e0d8      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb6:	e0d4      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ebe:	e0d0      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec6:	e0cc      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ece:	e0c8      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8003050 <UART_SetConfig+0x2d4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d125      	bne.n	8002f26 <UART_SetConfig+0x1aa>
 8002eda:	4b5b      	ldr	r3, [pc, #364]	@ (8003048 <UART_SetConfig+0x2cc>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ee4:	2b30      	cmp	r3, #48	@ 0x30
 8002ee6:	d016      	beq.n	8002f16 <UART_SetConfig+0x19a>
 8002ee8:	2b30      	cmp	r3, #48	@ 0x30
 8002eea:	d818      	bhi.n	8002f1e <UART_SetConfig+0x1a2>
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d00a      	beq.n	8002f06 <UART_SetConfig+0x18a>
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d814      	bhi.n	8002f1e <UART_SetConfig+0x1a2>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <UART_SetConfig+0x182>
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d008      	beq.n	8002f0e <UART_SetConfig+0x192>
 8002efc:	e00f      	b.n	8002f1e <UART_SetConfig+0x1a2>
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f04:	e0ad      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002f06:	2302      	movs	r3, #2
 8002f08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f0c:	e0a9      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002f0e:	2304      	movs	r3, #4
 8002f10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f14:	e0a5      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002f16:	2308      	movs	r3, #8
 8002f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f1c:	e0a1      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002f1e:	2310      	movs	r3, #16
 8002f20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f24:	e09d      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003054 <UART_SetConfig+0x2d8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d125      	bne.n	8002f7c <UART_SetConfig+0x200>
 8002f30:	4b45      	ldr	r3, [pc, #276]	@ (8003048 <UART_SetConfig+0x2cc>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f3c:	d016      	beq.n	8002f6c <UART_SetConfig+0x1f0>
 8002f3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f40:	d818      	bhi.n	8002f74 <UART_SetConfig+0x1f8>
 8002f42:	2b80      	cmp	r3, #128	@ 0x80
 8002f44:	d00a      	beq.n	8002f5c <UART_SetConfig+0x1e0>
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d814      	bhi.n	8002f74 <UART_SetConfig+0x1f8>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <UART_SetConfig+0x1d8>
 8002f4e:	2b40      	cmp	r3, #64	@ 0x40
 8002f50:	d008      	beq.n	8002f64 <UART_SetConfig+0x1e8>
 8002f52:	e00f      	b.n	8002f74 <UART_SetConfig+0x1f8>
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5a:	e082      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f62:	e07e      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002f64:	2304      	movs	r3, #4
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f6a:	e07a      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f72:	e076      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002f74:	2310      	movs	r3, #16
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7a:	e072      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a35      	ldr	r2, [pc, #212]	@ (8003058 <UART_SetConfig+0x2dc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d12a      	bne.n	8002fdc <UART_SetConfig+0x260>
 8002f86:	4b30      	ldr	r3, [pc, #192]	@ (8003048 <UART_SetConfig+0x2cc>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f94:	d01a      	beq.n	8002fcc <UART_SetConfig+0x250>
 8002f96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f9a:	d81b      	bhi.n	8002fd4 <UART_SetConfig+0x258>
 8002f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa0:	d00c      	beq.n	8002fbc <UART_SetConfig+0x240>
 8002fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa6:	d815      	bhi.n	8002fd4 <UART_SetConfig+0x258>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <UART_SetConfig+0x238>
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb0:	d008      	beq.n	8002fc4 <UART_SetConfig+0x248>
 8002fb2:	e00f      	b.n	8002fd4 <UART_SetConfig+0x258>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fba:	e052      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc2:	e04e      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fca:	e04a      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002fcc:	2308      	movs	r3, #8
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd2:	e046      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fda:	e042      	b.n	8003062 <UART_SetConfig+0x2e6>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a17      	ldr	r2, [pc, #92]	@ (8003040 <UART_SetConfig+0x2c4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d13a      	bne.n	800305c <UART_SetConfig+0x2e0>
 8002fe6:	4b18      	ldr	r3, [pc, #96]	@ (8003048 <UART_SetConfig+0x2cc>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ff0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ff4:	d01a      	beq.n	800302c <UART_SetConfig+0x2b0>
 8002ff6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ffa:	d81b      	bhi.n	8003034 <UART_SetConfig+0x2b8>
 8002ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003000:	d00c      	beq.n	800301c <UART_SetConfig+0x2a0>
 8003002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003006:	d815      	bhi.n	8003034 <UART_SetConfig+0x2b8>
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <UART_SetConfig+0x298>
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003010:	d008      	beq.n	8003024 <UART_SetConfig+0x2a8>
 8003012:	e00f      	b.n	8003034 <UART_SetConfig+0x2b8>
 8003014:	2300      	movs	r3, #0
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301a:	e022      	b.n	8003062 <UART_SetConfig+0x2e6>
 800301c:	2302      	movs	r3, #2
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003022:	e01e      	b.n	8003062 <UART_SetConfig+0x2e6>
 8003024:	2304      	movs	r3, #4
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302a:	e01a      	b.n	8003062 <UART_SetConfig+0x2e6>
 800302c:	2308      	movs	r3, #8
 800302e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003032:	e016      	b.n	8003062 <UART_SetConfig+0x2e6>
 8003034:	2310      	movs	r3, #16
 8003036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303a:	e012      	b.n	8003062 <UART_SetConfig+0x2e6>
 800303c:	efff69f3 	.word	0xefff69f3
 8003040:	40008000 	.word	0x40008000
 8003044:	40013800 	.word	0x40013800
 8003048:	40021000 	.word	0x40021000
 800304c:	40004400 	.word	0x40004400
 8003050:	40004800 	.word	0x40004800
 8003054:	40004c00 	.word	0x40004c00
 8003058:	40005000 	.word	0x40005000
 800305c:	2310      	movs	r3, #16
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a9f      	ldr	r2, [pc, #636]	@ (80032e4 <UART_SetConfig+0x568>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d17a      	bne.n	8003162 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800306c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003070:	2b08      	cmp	r3, #8
 8003072:	d824      	bhi.n	80030be <UART_SetConfig+0x342>
 8003074:	a201      	add	r2, pc, #4	@ (adr r2, 800307c <UART_SetConfig+0x300>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030a1 	.word	0x080030a1
 8003080:	080030bf 	.word	0x080030bf
 8003084:	080030a9 	.word	0x080030a9
 8003088:	080030bf 	.word	0x080030bf
 800308c:	080030af 	.word	0x080030af
 8003090:	080030bf 	.word	0x080030bf
 8003094:	080030bf 	.word	0x080030bf
 8003098:	080030bf 	.word	0x080030bf
 800309c:	080030b7 	.word	0x080030b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a0:	f7ff f84c 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80030a4:	61f8      	str	r0, [r7, #28]
        break;
 80030a6:	e010      	b.n	80030ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a8:	4b8f      	ldr	r3, [pc, #572]	@ (80032e8 <UART_SetConfig+0x56c>)
 80030aa:	61fb      	str	r3, [r7, #28]
        break;
 80030ac:	e00d      	b.n	80030ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ae:	f7fe ffad 	bl	800200c <HAL_RCC_GetSysClockFreq>
 80030b2:	61f8      	str	r0, [r7, #28]
        break;
 80030b4:	e009      	b.n	80030ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ba:	61fb      	str	r3, [r7, #28]
        break;
 80030bc:	e005      	b.n	80030ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80fb 	beq.w	80032c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d305      	bcc.n	80030ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d903      	bls.n	80030f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030f4:	e0e8      	b.n	80032c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2200      	movs	r2, #0
 80030fa:	461c      	mov	r4, r3
 80030fc:	4615      	mov	r5, r2
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	022b      	lsls	r3, r5, #8
 8003108:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800310c:	0222      	lsls	r2, r4, #8
 800310e:	68f9      	ldr	r1, [r7, #12]
 8003110:	6849      	ldr	r1, [r1, #4]
 8003112:	0849      	lsrs	r1, r1, #1
 8003114:	2000      	movs	r0, #0
 8003116:	4688      	mov	r8, r1
 8003118:	4681      	mov	r9, r0
 800311a:	eb12 0a08 	adds.w	sl, r2, r8
 800311e:	eb43 0b09 	adc.w	fp, r3, r9
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003130:	4650      	mov	r0, sl
 8003132:	4659      	mov	r1, fp
 8003134:	f7fd f850 	bl	80001d8 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003146:	d308      	bcc.n	800315a <UART_SetConfig+0x3de>
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800314e:	d204      	bcs.n	800315a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	60da      	str	r2, [r3, #12]
 8003158:	e0b6      	b.n	80032c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003160:	e0b2      	b.n	80032c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800316a:	d15e      	bne.n	800322a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800316c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003170:	2b08      	cmp	r3, #8
 8003172:	d828      	bhi.n	80031c6 <UART_SetConfig+0x44a>
 8003174:	a201      	add	r2, pc, #4	@ (adr r2, 800317c <UART_SetConfig+0x400>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	080031a1 	.word	0x080031a1
 8003180:	080031a9 	.word	0x080031a9
 8003184:	080031b1 	.word	0x080031b1
 8003188:	080031c7 	.word	0x080031c7
 800318c:	080031b7 	.word	0x080031b7
 8003190:	080031c7 	.word	0x080031c7
 8003194:	080031c7 	.word	0x080031c7
 8003198:	080031c7 	.word	0x080031c7
 800319c:	080031bf 	.word	0x080031bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7fe ffcc 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80031a4:	61f8      	str	r0, [r7, #28]
        break;
 80031a6:	e014      	b.n	80031d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7fe ffde 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 80031ac:	61f8      	str	r0, [r7, #28]
        break;
 80031ae:	e010      	b.n	80031d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b0:	4b4d      	ldr	r3, [pc, #308]	@ (80032e8 <UART_SetConfig+0x56c>)
 80031b2:	61fb      	str	r3, [r7, #28]
        break;
 80031b4:	e00d      	b.n	80031d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b6:	f7fe ff29 	bl	800200c <HAL_RCC_GetSysClockFreq>
 80031ba:	61f8      	str	r0, [r7, #28]
        break;
 80031bc:	e009      	b.n	80031d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c2:	61fb      	str	r3, [r7, #28]
        break;
 80031c4:	e005      	b.n	80031d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d077      	beq.n	80032c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005a      	lsls	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	441a      	add	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d916      	bls.n	8003222 <UART_SetConfig+0x4a6>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fa:	d212      	bcs.n	8003222 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f023 030f 	bic.w	r3, r3, #15
 8003204:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	b29b      	uxth	r3, r3
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	b29a      	uxth	r2, r3
 8003212:	8afb      	ldrh	r3, [r7, #22]
 8003214:	4313      	orrs	r3, r2
 8003216:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	8afa      	ldrh	r2, [r7, #22]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	e052      	b.n	80032c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003228:	e04e      	b.n	80032c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800322a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800322e:	2b08      	cmp	r3, #8
 8003230:	d827      	bhi.n	8003282 <UART_SetConfig+0x506>
 8003232:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <UART_SetConfig+0x4bc>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	0800325d 	.word	0x0800325d
 800323c:	08003265 	.word	0x08003265
 8003240:	0800326d 	.word	0x0800326d
 8003244:	08003283 	.word	0x08003283
 8003248:	08003273 	.word	0x08003273
 800324c:	08003283 	.word	0x08003283
 8003250:	08003283 	.word	0x08003283
 8003254:	08003283 	.word	0x08003283
 8003258:	0800327b 	.word	0x0800327b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800325c:	f7fe ff6e 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8003260:	61f8      	str	r0, [r7, #28]
        break;
 8003262:	e014      	b.n	800328e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003264:	f7fe ff80 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8003268:	61f8      	str	r0, [r7, #28]
        break;
 800326a:	e010      	b.n	800328e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800326c:	4b1e      	ldr	r3, [pc, #120]	@ (80032e8 <UART_SetConfig+0x56c>)
 800326e:	61fb      	str	r3, [r7, #28]
        break;
 8003270:	e00d      	b.n	800328e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003272:	f7fe fecb 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8003276:	61f8      	str	r0, [r7, #28]
        break;
 8003278:	e009      	b.n	800328e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800327e:	61fb      	str	r3, [r7, #28]
        break;
 8003280:	e005      	b.n	800328e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800328c:	bf00      	nop
    }

    if (pclk != 0U)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d019      	beq.n	80032c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	085a      	lsrs	r2, r3, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	441a      	add	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	d909      	bls.n	80032c2 <UART_SetConfig+0x546>
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b4:	d205      	bcs.n	80032c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	e002      	b.n	80032c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3728      	adds	r7, #40	@ 0x28
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e2:	bf00      	nop
 80032e4:	40008000 	.word	0x40008000
 80032e8:	00f42400 	.word	0x00f42400

080032ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01a      	beq.n	8003402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ea:	d10a      	bne.n	8003402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
  }
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b098      	sub	sp, #96	@ 0x60
 8003434:	af02      	add	r7, sp, #8
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003440:	f7fd fb66 	bl	8000b10 <HAL_GetTick>
 8003444:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b08      	cmp	r3, #8
 8003452:	d12e      	bne.n	80034b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003454:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f88c 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d021      	beq.n	80034b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800347c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003482:	653b      	str	r3, [r7, #80]	@ 0x50
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800348c:	647b      	str	r3, [r7, #68]	@ 0x44
 800348e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800349a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e6      	bne.n	800346e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e062      	b.n	8003578 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d149      	bne.n	8003554 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f856 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d03c      	beq.n	8003554 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	623b      	str	r3, [r7, #32]
   return(result);
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80034fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e6      	bne.n	80034da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3308      	adds	r3, #8
 8003512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	60fb      	str	r3, [r7, #12]
   return(result);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800352c:	61fa      	str	r2, [r7, #28]
 800352e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	69b9      	ldr	r1, [r7, #24]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	617b      	str	r3, [r7, #20]
   return(result);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e5      	bne.n	800350c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e011      	b.n	8003578 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3758      	adds	r7, #88	@ 0x58
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003590:	e049      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d045      	beq.n	8003626 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fd fab9 	bl	8000b10 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e048      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d031      	beq.n	8003626 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d110      	bne.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2208      	movs	r2, #8
 80035d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f838 	bl	800364e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2208      	movs	r2, #8
 80035e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e029      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003600:	d111      	bne.n	8003626 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800360a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f81e 	bl	800364e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e00f      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d0a6      	beq.n	8003592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800364e:	b480      	push	{r7}
 8003650:	b095      	sub	sp, #84	@ 0x54
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800366a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003674:	643b      	str	r3, [r7, #64]	@ 0x40
 8003676:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800367a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e6      	bne.n	8003656 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3308      	adds	r3, #8
 800368e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	61fb      	str	r3, [r7, #28]
   return(result);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d118      	bne.n	80036f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f023 0310 	bic.w	r3, r3, #16
 80036d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	6979      	ldr	r1, [r7, #20]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	613b      	str	r3, [r7, #16]
   return(result);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e6      	bne.n	80036c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800370a:	bf00      	nop
 800370c:	3754      	adds	r7, #84	@ 0x54
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <memset>:
 8003716:	4402      	add	r2, r0
 8003718:	4603      	mov	r3, r0
 800371a:	4293      	cmp	r3, r2
 800371c:	d100      	bne.n	8003720 <memset+0xa>
 800371e:	4770      	bx	lr
 8003720:	f803 1b01 	strb.w	r1, [r3], #1
 8003724:	e7f9      	b.n	800371a <memset+0x4>
	...

08003728 <__libc_init_array>:
 8003728:	b570      	push	{r4, r5, r6, lr}
 800372a:	4d0d      	ldr	r5, [pc, #52]	@ (8003760 <__libc_init_array+0x38>)
 800372c:	4c0d      	ldr	r4, [pc, #52]	@ (8003764 <__libc_init_array+0x3c>)
 800372e:	1b64      	subs	r4, r4, r5
 8003730:	10a4      	asrs	r4, r4, #2
 8003732:	2600      	movs	r6, #0
 8003734:	42a6      	cmp	r6, r4
 8003736:	d109      	bne.n	800374c <__libc_init_array+0x24>
 8003738:	4d0b      	ldr	r5, [pc, #44]	@ (8003768 <__libc_init_array+0x40>)
 800373a:	4c0c      	ldr	r4, [pc, #48]	@ (800376c <__libc_init_array+0x44>)
 800373c:	f000 f818 	bl	8003770 <_init>
 8003740:	1b64      	subs	r4, r4, r5
 8003742:	10a4      	asrs	r4, r4, #2
 8003744:	2600      	movs	r6, #0
 8003746:	42a6      	cmp	r6, r4
 8003748:	d105      	bne.n	8003756 <__libc_init_array+0x2e>
 800374a:	bd70      	pop	{r4, r5, r6, pc}
 800374c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003750:	4798      	blx	r3
 8003752:	3601      	adds	r6, #1
 8003754:	e7ee      	b.n	8003734 <__libc_init_array+0xc>
 8003756:	f855 3b04 	ldr.w	r3, [r5], #4
 800375a:	4798      	blx	r3
 800375c:	3601      	adds	r6, #1
 800375e:	e7f2      	b.n	8003746 <__libc_init_array+0x1e>
 8003760:	080037f0 	.word	0x080037f0
 8003764:	080037f0 	.word	0x080037f0
 8003768:	080037f0 	.word	0x080037f0
 800376c:	080037f4 	.word	0x080037f4

08003770 <_init>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	bf00      	nop
 8003774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003776:	bc08      	pop	{r3}
 8003778:	469e      	mov	lr, r3
 800377a:	4770      	bx	lr

0800377c <_fini>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	bf00      	nop
 8003780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003782:	bc08      	pop	{r3}
 8003784:	469e      	mov	lr, r3
 8003786:	4770      	bx	lr
